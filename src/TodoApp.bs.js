// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                   = require("bs-platform/lib/js/list.js");
var $$Array                = require("bs-platform/lib/js/array.js");
var Block                  = require("bs-platform/lib/js/block.js");
var Curry                  = require("bs-platform/lib/js/curry.js");
var React                  = require("react");
var Js_boolean             = require("bs-platform/lib/js/js_boolean.js");
var Pervasives             = require("bs-platform/lib/js/pervasives.js");
var ReasonReact            = require("reason-react/src/ReasonReact.js");
var TodoItem$ReactTemplate = require("./TodoItem.bs.js");

function str(prim) {
  return prim;
}

var component = ReasonReact.reducerComponent("Page");

function updateIn(valToUpdate, newVal, arr) {
  return List.map((function (curVal) {
                var match = +(curVal === valToUpdate);
                if (match !== 0) {
                  return newVal;
                } else {
                  return curVal;
                }
              }), arr);
}

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (param) {
      var send = param[/* send */4];
      var match = param[/* state */2];
      var viewMode = match[/* viewMode */1];
      return React.createElement("div", undefined, React.createElement("form", {
                      onSubmit: (function ($$event) {
                          $$event.preventDefault();
                          return /* () */0;
                        })
                    }, React.createElement("input", {
                          type: "text",
                          value: match[/* newTodo */0],
                          onChange: (function ($$event) {
                              var value = $$event.target.value;
                              return Curry._1(send, /* Change */Block.__(0, [value]));
                            })
                        }), React.createElement("button", {
                          onClick: (function () {
                              return Curry._1(send, /* Add */0);
                            })
                        }, "+")), React.createElement("div", undefined, $$Array.of_list(List.map((function (todo) {
                                return ReasonReact.element(/* None */0, /* None */0, TodoItem$ReactTemplate.make(todo, (function () {
                                                  return Curry._1(send, /* Toggle */Block.__(1, [todo]));
                                                }), /* array */[]));
                              }), List.filter((function (todo) {
                                      switch (viewMode) {
                                        case 0 : 
                                            return /* true */1;
                                        case 1 : 
                                            return todo[/* isChecked */1];
                                        case 2 : 
                                            return 1 - todo[/* isChecked */1];
                                        
                                      }
                                    }))(match[/* todos */2])))), React.createElement("div", undefined, React.createElement("label", undefined, React.createElement("input", {
                              checked: Js_boolean.to_js_boolean(+(viewMode === /* All */0)),
                              name: "viewMode",
                              type: "radio",
                              onChange: (function () {
                                  return Curry._1(send, /* SetViewMode */Block.__(2, [/* All */0]));
                                })
                            }), "All"), React.createElement("label", undefined, React.createElement("input", {
                              checked: Js_boolean.to_js_boolean(+(viewMode === /* Complete */1)),
                              name: "viewMode",
                              type: "radio",
                              onChange: (function () {
                                  return Curry._1(send, /* SetViewMode */Block.__(2, [/* Complete */1]));
                                })
                            }), "Complete"), React.createElement("label", undefined, React.createElement("input", {
                              checked: Js_boolean.to_js_boolean(+(viewMode === /* Incomplete */2)),
                              name: "viewMode",
                              type: "radio",
                              onChange: (function () {
                                  return Curry._1(send, /* SetViewMode */Block.__(2, [/* Incomplete */2]));
                                })
                            }), "Incomplete")));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* newTodo */"",
              /* viewMode : All */0,
              /* todos : [] */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        return /* Update */Block.__(0, [/* record */[
                    /* newTodo */"",
                    /* viewMode */state[/* viewMode */1],
                    /* todos */Pervasives.$at(/* :: */[
                          /* record */[
                            /* text */state[/* newTodo */0],
                            /* isChecked : false */0
                          ],
                          /* [] */0
                        ], state[/* todos */2])
                  ]]);
      } else {
        switch (action.tag | 0) {
          case 0 : 
              return /* Update */Block.__(0, [/* record */[
                          /* newTodo */action[0],
                          /* viewMode */state[/* viewMode */1],
                          /* todos */state[/* todos */2]
                        ]]);
          case 1 : 
              var todoToToggle = action[0];
              return /* Update */Block.__(0, [/* record */[
                          /* newTodo */state[/* newTodo */0],
                          /* viewMode */state[/* viewMode */1],
                          /* todos */updateIn(todoToToggle, /* record */[
                                /* text */todoToToggle[/* text */0],
                                /* isChecked */1 - todoToToggle[/* isChecked */1]
                              ], state[/* todos */2])
                        ]]);
          case 2 : 
              return /* Update */Block.__(0, [/* record */[
                          /* newTodo */state[/* newTodo */0],
                          /* viewMode */action[0],
                          /* todos */state[/* todos */2]
                        ]]);
          
        }
      }
    });
  return newrecord;
}

var to_js_bool = Js_boolean.to_js_boolean;

exports.str        = str;
exports.to_js_bool = to_js_bool;
exports.component  = component;
exports.updateIn   = updateIn;
exports.make       = make;
/* component Not a pure module */
